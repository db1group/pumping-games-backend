{"version":3,"file":"static/js/57.a7251f90.chunk.js","mappings":"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","sources":["KcApp/screens/registerUserProfile/index.tsx","KcApp/screens/template/index.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React, { memo, useState } from 'react'\nimport DefaultTemplate from '../template'\nimport type { TemplateProps } from '../template'\nimport type { KcProps } from 'keycloakify'\nimport type { KcContextBase } from 'keycloakify'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport type { I18n } from '../../i18n'\nimport { UserProfileFormFields } from 'keycloakify/lib/components/shared/UserProfileCommons'\n\nexport type RegisterUserProfileProps = KcProps & {\n  kcContext: KcContextBase.RegisterUserProfile\n  i18n: I18n\n  doFetchDefaultThemeResources?: boolean\n  Template?: (props: TemplateProps) => JSX.Element | null\n}\n\nconst RegisterUserProfile = memo((props: RegisterUserProfileProps) => {\n  const {\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources = true,\n    Template = DefaultTemplate,\n    ...kcProps\n  } = props\n\n  const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext\n\n  const { msg, msgStr } = i18n\n\n  const [isFomSubmittable, setIsFomSubmittable] = useState(false)\n\n  return (\n    <Template\n      {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n      displayMessage={messagesPerField.exists('global')}\n      displayRequiredFields={true}\n      headerNode={msg('registerTitle')}\n      formNode={\n        <form\n          id='kc-register-form'\n          className={clsx(kcProps.kcFormClass)}\n          action={url.registrationAction}\n          method='post'\n        >\n          <UserProfileFormFields\n            kcContext={kcContext}\n            onIsFormSubmittableValueChange={setIsFomSubmittable}\n            i18n={i18n}\n            {...kcProps}\n          />\n          {recaptchaRequired && (\n            <div className='form-group'>\n              <div className={clsx(kcProps.kcInputWrapperClass)}>\n                <div className='g-recaptcha' data-size='compact' data-sitekey={recaptchaSiteKey} />\n              </div>\n            </div>\n          )}\n          <div className={clsx(kcProps.kcFormGroupClass)} style={{ marginBottom: 30 }}>\n            <div id='kc-form-options' className={clsx(kcProps.kcFormOptionsClass)}>\n              <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                <span>\n                  <a href={url.loginUrl}>{msg('backToLogin')}</a>\n                </span>\n              </div>\n            </div>\n\n            <div id='kc-form-buttons' className={clsx(kcProps.kcFormButtonsClass)}>\n              <input\n                className={clsx(\n                  kcProps.kcButtonClass,\n                  kcProps.kcButtonPrimaryClass,\n                  kcProps.kcButtonBlockClass,\n                  kcProps.kcButtonLargeClass\n                )}\n                type='submit'\n                value={msgStr('doRegister')}\n                disabled={!isFomSubmittable}\n              />\n            </div>\n          </div>\n        </form>\n      }\n    />\n  )\n})\n\nexport default RegisterUserProfile\n","import type { KcContextBase, KcTemplateProps } from 'keycloakify'\nimport { pathJoin } from 'keycloakify/bin/tools/pathJoin'\nimport { assert } from 'keycloakify/lib/tools/assert'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport { headInsert } from 'keycloakify/lib/tools/headInsert'\nimport { useCallbackFactory } from 'powerhooks/useCallbackFactory'\nimport { useConstCallback } from 'powerhooks/useConstCallback'\nimport type { ReactNode } from 'react'\nimport { memo, useEffect, useReducer } from 'react'\nimport type { I18n } from '../../i18n'\n\nimport LogoApp from '../../../assets/teste-logo.png'\n\nexport type TemplateProps = {\n  displayInfo?: boolean\n  displayMessage?: boolean\n  displayRequiredFields?: boolean\n  displayWide?: boolean\n  showAnotherWayIfPresent?: boolean\n  headerNode: ReactNode\n  showUsernameNode?: ReactNode\n  formNode: ReactNode\n  infoNode?: ReactNode\n  /** If you write your own page you probably want\n   * to avoid pulling the default theme assets.\n   */\n  doFetchDefaultThemeResources: boolean\n} & { kcContext: KcContextBase; i18n: I18n } & KcTemplateProps\n\nconst Template = memo((props: TemplateProps) => {\n  const {\n    displayInfo = false,\n    displayMessage = true,\n    displayRequiredFields = false,\n    displayWide = false,\n    showAnotherWayIfPresent = true,\n    headerNode,\n    showUsernameNode = null,\n    formNode,\n    infoNode = null,\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources,\n  } = props\n\n  const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n\n\n  const onChangeLanguageClickFactory = useCallbackFactory(([kcLanguageTag]: [string]) =>\n    changeLocale(kcLanguageTag)\n  )\n\n  const onTryAnotherWayClick = useConstCallback(\n    () => (document.forms['kc-select-try-another-way-form' as never].submit(), false)\n  )\n\n  const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext\n\n  const [isExtraCssLoaded, setExtraCssLoaded] = useReducer(() => true, false)\n\n  useEffect(() => {\n    if (!doFetchDefaultThemeResources) {\n      setExtraCssLoaded()\n      return\n    }\n\n    let isUnmounted = false\n    const cleanups: (() => void)[] = []\n\n    const toArr = (x: string | readonly string[] | undefined) =>\n      typeof x === 'string' ? x.split(' ') : x ?? []\n\n    Promise.all(\n      [\n        ...toArr(props.stylesCommon).map(relativePath =>\n          pathJoin(url.resourcesCommonPath, relativePath)\n        ),\n        ...toArr(props.styles).map(relativePath => pathJoin(url.resourcesPath, relativePath)),\n      ]\n        .reverse()\n        .map(href =>\n          headInsert({\n            type: 'css',\n            href,\n            position: 'prepend',\n          })\n        )\n    ).then(() => {\n      if (isUnmounted) {\n        return\n      }\n\n      setExtraCssLoaded()\n    })\n\n    toArr(props.scripts).forEach(relativePath =>\n      headInsert({\n        type: 'javascript',\n        src: pathJoin(url.resourcesPath, relativePath),\n      })\n    )\n\n    if (props.kcHtmlClass !== undefined) {\n      const htmlClassList = document.getElementsByTagName('html')[0].classList\n\n      const tokens = clsx(props.kcHtmlClass).split(' ')\n\n      htmlClassList.add(...tokens)\n\n      cleanups.push(() => htmlClassList.remove(...tokens))\n    }\n\n    return () => {\n      isUnmounted = true\n\n      cleanups.forEach(f => f())\n    }\n  }, [props.kcHtmlClass])\n\n  if (!isExtraCssLoaded) {\n    return null\n  }\n\n  return (\n    <div className={clsx(props.kcLoginClass)}>\n      <div id='kc-header' className={clsx(props.kcHeaderClass)}>\n        <div id='kc-header-wrapper' className={clsx(props.kcHeaderWrapperClass)}>\n          <a href='https://www.db1.com.br/'>\n            <img src={LogoApp} alt='Logo App' />\n          </a>\n        </div>\n      </div>\n\n      <div className={clsx(props.kcFormCardClass, displayWide && props.kcFormCardAccountClass)}>\n        <header className={clsx(props.kcFormHeaderClass)}>\n          {realm.internationalizationEnabled &&\n            (assert(locale !== undefined), true) &&\n            locale.supported.length > 1 && (\n              <div id='kc-locale'>\n                <div id='kc-locale-wrapper' className={clsx(props.kcLocaleWrapperClass)}>\n                  <div className='kc-dropdown' id='kc-locale-dropdown'>\n                    <a href='#' id='kc-current-locale-link'>\n                      {labelBySupportedLanguageTag[currentLanguageTag]}\n                    </a>\n                    <ul>\n                      {locale.supported.map(({ languageTag }) => (\n                        <li key={languageTag} className='kc-dropdown-item'>\n                          <a href='#' onClick={onChangeLanguageClickFactory(languageTag)}>\n                            {labelBySupportedLanguageTag[languageTag]}\n                          </a>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n          {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n            displayRequiredFields ? (\n              <div className={clsx(props.kcContentWrapperClass)}>\n                <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                  <span className='subtitle'>\n                    <span className='required'>*</span>\n                    {msg('requiredFields')}\n                  </span>\n                </div>\n                <div className='col-md-10'>\n                  <h1 id='kc-page-title'>{headerNode}</h1>\n                </div>\n              </div>\n            ) : (\n              <h1 id='kc-page-title'>{headerNode}</h1>\n            )\n          ) : displayRequiredFields ? (\n            <div className={clsx(props.kcContentWrapperClass)}>\n              <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                <span className='subtitle'>\n                  <span className='required'>*</span> {msg('requiredFields')}\n                </span>\n              </div>\n              <div className='col-md-10'>\n                {showUsernameNode}\n                <div className={clsx(props.kcFormGroupClass)}>\n                  <div id='kc-username'>\n                    <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                    <a id='reset-login' href={url.loginRestartFlowUrl}>\n                      <div className='kc-login-tooltip'>\n                        <i className={clsx(props.kcResetFlowIcon)}></i>\n                        <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {showUsernameNode}\n              <div className={clsx(props.kcFormGroupClass)}>\n                <div id='kc-username'>\n                  <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                  <a id='reset-login' href={url.loginRestartFlowUrl}>\n                    <div className='kc-login-tooltip'>\n                      <i className={clsx(props.kcResetFlowIcon)}></i>\n                      <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                    </div>\n                  </a>\n                </div>\n              </div>\n            </>\n          )}\n        </header>\n        <div id='kc-content'>\n          <div id='kc-content-wrapper'>\n            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n            {displayMessage &&\n              message !== undefined &&\n              (message.type !== 'warning' || !isAppInitiatedAction) && (\n                <div className={clsx('alert', `alert-${message.type}`)}>\n                  {message.type === 'success' && (\n                    <span\n                      className={clsx(props.kcFeedbackSuccessIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'warning' && (\n                    <span\n                      className={clsx(props.kcFeedbackWarningIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'error' && (\n                    <span\n                      className={clsx(props.kcFeedbackErrorIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'info' && (\n                    <span\n                      className={clsx(props.kcFeedbackInfoIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  <span\n                    className='kc-feedback-text'\n                    style={{ background: 'none' }}\n                    dangerouslySetInnerHTML={{\n                      __html: message.summary,\n                    }}\n                  />\n                </div>\n              )}\n            {formNode}\n            {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n              <form\n                id='kc-select-try-another-way-form'\n                action={url.loginAction}\n                method='post'\n                className={clsx(displayWide && props.kcContentWrapperClass)}\n              >\n                <div\n                  className={clsx(\n                    displayWide && [\n                      props.kcFormSocialAccountContentClass,\n                      props.kcFormSocialAccountClass,\n                    ]\n                  )}\n                >\n                  <div className={clsx(props.kcFormGroupClass)}>\n                    <input type='hidden' name='tryAnotherWay' value='on' />\n                    <a href='#' id='try-another-way' onClick={onTryAnotherWayClick}>\n                      {msg('doTryAnotherWay')}\n                    </a>\n                  </div>\n                </div>\n              </form>\n            )}\n            {displayInfo && (\n              <div id='kc-info' className={clsx(props.kcSignUpClass)}>\n                <div id='kc-info-wrapper' className={clsx(props.kcInfoAreaWrapperClass)}>\n                  {infoNode}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Template\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={clsx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={clsx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={clsx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n\n                                            return (\n                                                <>\n                                                    <style>{`#${divId} > span: { display: block; }`}</style>\n                                                    <span\n                                                        id={divId}\n                                                        className={clsx(props.kcInputErrorMessageClass)}\n                                                        style={{\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }}\n                                                        aria-live=\"polite\"\n                                                    >\n                                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                    </span>\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["RegisterUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useState","isFomSubmittable","setIsFomSubmittable","displayMessage","exists","displayRequiredFields","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","onIsFormSubmittableValueChange","kcInputWrapperClass","kcFormGroupClass","style","marginBottom","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","displayInfo","displayWide","showAnotherWayIfPresent","showUsernameNode","infoNode","changeLocale","labelBySupportedLanguageTag","currentLanguageTag","onChangeLanguageClickFactory","useCallbackFactory","kcLanguageTag","onTryAnotherWayClick","useConstCallback","document","forms","submit","realm","locale","auth","message","isAppInitiatedAction","useReducer","isExtraCssLoaded","setExtraCssLoaded","useEffect","isUnmounted","cleanups","toArr","x","split","Promise","all","stylesCommon","map","relativePath","pathJoin","resourcesCommonPath","styles","resourcesPath","reverse","headInsert","position","then","scripts","forEach","src","undefined","kcHtmlClass","htmlClassList","getElementsByTagName","classList","tokens","add","push","remove","f","kcLoginClass","kcHeaderClass","kcHeaderWrapperClass","LogoApp","alt","kcFormCardClass","kcFormCardAccountClass","kcFormHeaderClass","internationalizationEnabled","assert","supported","length","kcLocaleWrapperClass","languageTag","onClick","showUsername","showResetCredentials","kcContentWrapperClass","kcLabelWrapperClass","attemptedUsername","loginRestartFlowUrl","kcResetFlowIcon","kcFeedbackSuccessIcon","background","kcFeedbackWarningIcon","kcFeedbackErrorIcon","kcFeedbackInfoIcon","dangerouslySetInnerHTML","__html","summary","showTryAnotherWayLink","loginAction","kcFormSocialAccountContentClass","kcFormSocialAccountClass","name","kcSignUpClass","kcInfoAreaWrapperClass","UserProfileFormFields","_a","BeforeField","AfterField","__rest","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","onChangeFactory","target","onBlurFactory","currentGroup","React","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","kcFormGroupErrorClass","Fragment","key","kcFormGroupHeader","kcLabelClass","htmlFor","displayName","required","options","validators","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","errorMessage","_objectWithoutProperties","source","excluded","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}