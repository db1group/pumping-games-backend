{"version":3,"file":"static/js/3109.69fd4dd7.chunk.js","mappings":"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","sources":["KcApp/screens/template/index.tsx","KcApp/screens/updateUserProfile/index.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import type { KcContextBase, KcTemplateProps } from 'keycloakify'\nimport { pathJoin } from 'keycloakify/bin/tools/pathJoin'\nimport { assert } from 'keycloakify/lib/tools/assert'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport { headInsert } from 'keycloakify/lib/tools/headInsert'\nimport { useCallbackFactory } from 'powerhooks/useCallbackFactory'\nimport { useConstCallback } from 'powerhooks/useConstCallback'\nimport type { ReactNode } from 'react'\nimport { memo, useEffect, useReducer } from 'react'\nimport type { I18n } from '../../i18n'\n\nimport LogoApp from '../../../assets/teste-logo.png'\n\nexport type TemplateProps = {\n  displayInfo?: boolean\n  displayMessage?: boolean\n  displayRequiredFields?: boolean\n  displayWide?: boolean\n  showAnotherWayIfPresent?: boolean\n  headerNode: ReactNode\n  showUsernameNode?: ReactNode\n  formNode: ReactNode\n  infoNode?: ReactNode\n  /** If you write your own page you probably want\n   * to avoid pulling the default theme assets.\n   */\n  doFetchDefaultThemeResources: boolean\n} & { kcContext: KcContextBase; i18n: I18n } & KcTemplateProps\n\nconst Template = memo((props: TemplateProps) => {\n  const {\n    displayInfo = false,\n    displayMessage = true,\n    displayRequiredFields = false,\n    displayWide = false,\n    showAnotherWayIfPresent = true,\n    headerNode,\n    showUsernameNode = null,\n    formNode,\n    infoNode = null,\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources,\n  } = props\n\n  const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n\n\n  const onChangeLanguageClickFactory = useCallbackFactory(([kcLanguageTag]: [string]) =>\n    changeLocale(kcLanguageTag)\n  )\n\n  const onTryAnotherWayClick = useConstCallback(\n    () => (document.forms['kc-select-try-another-way-form' as never].submit(), false)\n  )\n\n  const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext\n\n  const [isExtraCssLoaded, setExtraCssLoaded] = useReducer(() => true, false)\n\n  useEffect(() => {\n    if (!doFetchDefaultThemeResources) {\n      setExtraCssLoaded()\n      return\n    }\n\n    let isUnmounted = false\n    const cleanups: (() => void)[] = []\n\n    const toArr = (x: string | readonly string[] | undefined) =>\n      typeof x === 'string' ? x.split(' ') : x ?? []\n\n    Promise.all(\n      [\n        ...toArr(props.stylesCommon).map(relativePath =>\n          pathJoin(url.resourcesCommonPath, relativePath)\n        ),\n        ...toArr(props.styles).map(relativePath => pathJoin(url.resourcesPath, relativePath)),\n      ]\n        .reverse()\n        .map(href =>\n          headInsert({\n            type: 'css',\n            href,\n            position: 'prepend',\n          })\n        )\n    ).then(() => {\n      if (isUnmounted) {\n        return\n      }\n\n      setExtraCssLoaded()\n    })\n\n    toArr(props.scripts).forEach(relativePath =>\n      headInsert({\n        type: 'javascript',\n        src: pathJoin(url.resourcesPath, relativePath),\n      })\n    )\n\n    if (props.kcHtmlClass !== undefined) {\n      const htmlClassList = document.getElementsByTagName('html')[0].classList\n\n      const tokens = clsx(props.kcHtmlClass).split(' ')\n\n      htmlClassList.add(...tokens)\n\n      cleanups.push(() => htmlClassList.remove(...tokens))\n    }\n\n    return () => {\n      isUnmounted = true\n\n      cleanups.forEach(f => f())\n    }\n  }, [props.kcHtmlClass])\n\n  if (!isExtraCssLoaded) {\n    return null\n  }\n\n  return (\n    <div className={clsx(props.kcLoginClass)}>\n      <div id='kc-header' className={clsx(props.kcHeaderClass)}>\n        <div id='kc-header-wrapper' className={clsx(props.kcHeaderWrapperClass)}>\n          <a href='https://www.db1.com.br/'>\n            <img src={LogoApp} alt='Logo App' />\n          </a>\n        </div>\n      </div>\n\n      <div className={clsx(props.kcFormCardClass, displayWide && props.kcFormCardAccountClass)}>\n        <header className={clsx(props.kcFormHeaderClass)}>\n          {realm.internationalizationEnabled &&\n            (assert(locale !== undefined), true) &&\n            locale.supported.length > 1 && (\n              <div id='kc-locale'>\n                <div id='kc-locale-wrapper' className={clsx(props.kcLocaleWrapperClass)}>\n                  <div className='kc-dropdown' id='kc-locale-dropdown'>\n                    <a href='#' id='kc-current-locale-link'>\n                      {labelBySupportedLanguageTag[currentLanguageTag]}\n                    </a>\n                    <ul>\n                      {locale.supported.map(({ languageTag }) => (\n                        <li key={languageTag} className='kc-dropdown-item'>\n                          <a href='#' onClick={onChangeLanguageClickFactory(languageTag)}>\n                            {labelBySupportedLanguageTag[languageTag]}\n                          </a>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n          {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n            displayRequiredFields ? (\n              <div className={clsx(props.kcContentWrapperClass)}>\n                <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                  <span className='subtitle'>\n                    <span className='required'>*</span>\n                    {msg('requiredFields')}\n                  </span>\n                </div>\n                <div className='col-md-10'>\n                  <h1 id='kc-page-title'>{headerNode}</h1>\n                </div>\n              </div>\n            ) : (\n              <h1 id='kc-page-title'>{headerNode}</h1>\n            )\n          ) : displayRequiredFields ? (\n            <div className={clsx(props.kcContentWrapperClass)}>\n              <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                <span className='subtitle'>\n                  <span className='required'>*</span> {msg('requiredFields')}\n                </span>\n              </div>\n              <div className='col-md-10'>\n                {showUsernameNode}\n                <div className={clsx(props.kcFormGroupClass)}>\n                  <div id='kc-username'>\n                    <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                    <a id='reset-login' href={url.loginRestartFlowUrl}>\n                      <div className='kc-login-tooltip'>\n                        <i className={clsx(props.kcResetFlowIcon)}></i>\n                        <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {showUsernameNode}\n              <div className={clsx(props.kcFormGroupClass)}>\n                <div id='kc-username'>\n                  <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                  <a id='reset-login' href={url.loginRestartFlowUrl}>\n                    <div className='kc-login-tooltip'>\n                      <i className={clsx(props.kcResetFlowIcon)}></i>\n                      <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                    </div>\n                  </a>\n                </div>\n              </div>\n            </>\n          )}\n        </header>\n        <div id='kc-content'>\n          <div id='kc-content-wrapper'>\n            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n            {displayMessage &&\n              message !== undefined &&\n              (message.type !== 'warning' || !isAppInitiatedAction) && (\n                <div className={clsx('alert', `alert-${message.type}`)}>\n                  {message.type === 'success' && (\n                    <span\n                      className={clsx(props.kcFeedbackSuccessIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'warning' && (\n                    <span\n                      className={clsx(props.kcFeedbackWarningIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'error' && (\n                    <span\n                      className={clsx(props.kcFeedbackErrorIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'info' && (\n                    <span\n                      className={clsx(props.kcFeedbackInfoIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  <span\n                    className='kc-feedback-text'\n                    style={{ background: 'none' }}\n                    dangerouslySetInnerHTML={{\n                      __html: message.summary,\n                    }}\n                  />\n                </div>\n              )}\n            {formNode}\n            {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n              <form\n                id='kc-select-try-another-way-form'\n                action={url.loginAction}\n                method='post'\n                className={clsx(displayWide && props.kcContentWrapperClass)}\n              >\n                <div\n                  className={clsx(\n                    displayWide && [\n                      props.kcFormSocialAccountContentClass,\n                      props.kcFormSocialAccountClass,\n                    ]\n                  )}\n                >\n                  <div className={clsx(props.kcFormGroupClass)}>\n                    <input type='hidden' name='tryAnotherWay' value='on' />\n                    <a href='#' id='try-another-way' onClick={onTryAnotherWayClick}>\n                      {msg('doTryAnotherWay')}\n                    </a>\n                  </div>\n                </div>\n              </form>\n            )}\n            {displayInfo && (\n              <div id='kc-info' className={clsx(props.kcSignUpClass)}>\n                <div id='kc-info-wrapper' className={clsx(props.kcInfoAreaWrapperClass)}>\n                  {infoNode}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Template\n","import React, { useState, memo } from 'react'\nimport DefaultTemplate from '../template'\nimport type { TemplateProps } from '../template'\nimport type { KcProps } from 'keycloakify'\nimport type { KcContextBase } from 'keycloakify'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport type { I18n } from '../../i18n'\nimport { UserProfileFormFields } from 'keycloakify/lib/components/shared/UserProfileCommons'\n\nexport type UpdateUserProfileProps = KcProps & {\n  kcContext: KcContextBase.UpdateUserProfile\n  i18n: I18n\n  doFetchDefaultThemeResources?: boolean\n  Template?: (props: TemplateProps) => JSX.Element | null\n}\n\nconst UpdateUserProfile = memo((props: UpdateUserProfileProps) => {\n  const {\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources = true,\n    Template = DefaultTemplate,\n    ...kcProps\n  } = props\n\n  const { msg, msgStr } = i18n\n\n  const { url, isAppInitiatedAction } = kcContext\n\n  const [isFomSubmittable, setIsFomSubmittable] = useState(false)\n\n  return (\n    <Template\n      {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n      headerNode={msg('loginProfileTitle')}\n      formNode={\n        <form\n          id='kc-update-profile-form'\n          className={clsx(kcProps.kcFormClass)}\n          action={url.loginAction}\n          method='post'\n        >\n          <UserProfileFormFields\n            kcContext={kcContext}\n            onIsFormSubmittableValueChange={setIsFomSubmittable}\n            i18n={i18n}\n            {...kcProps}\n          />\n\n          <div className={clsx(kcProps.kcFormGroupClass)}>\n            <div id='kc-form-options' className={clsx(kcProps.kcFormOptionsClass)}>\n              <div className={clsx(kcProps.kcFormOptionsWrapperClass)}></div>\n            </div>\n\n            <div id='kc-form-buttons' className={clsx(kcProps.kcFormButtonsClass)}>\n              {isAppInitiatedAction ? (\n                <>\n                  <input\n                    className={clsx(\n                      kcProps.kcButtonClass,\n                      kcProps.kcButtonPrimaryClass,\n                      kcProps.kcButtonLargeClass\n                    )}\n                    type='submit'\n                    value={msgStr('doSubmit')}\n                  />\n                  <button\n                    className={clsx(\n                      kcProps.kcButtonClass,\n                      kcProps.kcButtonDefaultClass,\n                      kcProps.kcButtonLargeClass\n                    )}\n                    type='submit'\n                    name='cancel-aia'\n                    value='true'\n                    formNoValidate\n                  >\n                    {msg('doCancel')}\n                  </button>\n                </>\n              ) : (\n                <input\n                  className={clsx(\n                    kcProps.kcButtonClass,\n                    kcProps.kcButtonPrimaryClass,\n                    kcProps.kcButtonBlockClass,\n                    kcProps.kcButtonLargeClass\n                  )}\n                  type='submit'\n                  defaultValue={msgStr('doSubmit')}\n                  disabled={!isFomSubmittable}\n                />\n              )}\n            </div>\n          </div>\n        </form>\n      }\n    />\n  )\n})\n\nexport default UpdateUserProfile\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={clsx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={clsx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={clsx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n\n                                            return (\n                                                <>\n                                                    <style>{`#${divId} > span: { display: block; }`}</style>\n                                                    <span\n                                                        id={divId}\n                                                        className={clsx(props.kcInputErrorMessageClass)}\n                                                        style={{\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }}\n                                                        aria-live=\"polite\"\n                                                    >\n                                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                    </span>\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["memo","props","displayInfo","displayMessage","displayRequiredFields","displayWide","showAnotherWayIfPresent","headerNode","showUsernameNode","formNode","infoNode","kcContext","i18n","doFetchDefaultThemeResources","msg","changeLocale","labelBySupportedLanguageTag","currentLanguageTag","onChangeLanguageClickFactory","useCallbackFactory","kcLanguageTag","onTryAnotherWayClick","useConstCallback","document","forms","submit","realm","locale","auth","url","message","isAppInitiatedAction","useReducer","isExtraCssLoaded","setExtraCssLoaded","useEffect","isUnmounted","cleanups","toArr","x","split","Promise","all","stylesCommon","map","relativePath","pathJoin","resourcesCommonPath","styles","resourcesPath","reverse","href","headInsert","type","position","then","scripts","forEach","src","undefined","kcHtmlClass","htmlClassList","getElementsByTagName","classList","tokens","clsx","add","push","remove","f","className","kcLoginClass","id","kcHeaderClass","kcHeaderWrapperClass","LogoApp","alt","kcFormCardClass","kcFormCardAccountClass","kcFormHeaderClass","internationalizationEnabled","assert","supported","length","kcLocaleWrapperClass","languageTag","onClick","showUsername","showResetCredentials","kcContentWrapperClass","kcLabelWrapperClass","kcFormGroupClass","attemptedUsername","loginRestartFlowUrl","kcResetFlowIcon","kcFeedbackSuccessIcon","style","background","kcFeedbackWarningIcon","kcFeedbackErrorIcon","kcFeedbackInfoIcon","dangerouslySetInnerHTML","__html","summary","showTryAnotherWayLink","action","loginAction","method","kcFormSocialAccountContentClass","kcFormSocialAccountClass","name","value","kcSignUpClass","kcInfoAreaWrapperClass","UpdateUserProfile","Template","DefaultTemplate","kcProps","msgStr","useState","isFomSubmittable","setIsFomSubmittable","kcFormClass","onIsFormSubmittableValueChange","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","kcButtonDefaultClass","formNoValidate","kcButtonBlockClass","defaultValue","disabled","UserProfileFormFields","_a","BeforeField","AfterField","__rest","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","onChangeFactory","target","onBlurFactory","currentGroup","React","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","kcFormGroupErrorClass","Fragment","key","kcFormGroupHeader","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","errorMessage","_objectWithoutProperties","source","excluded","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}