{"version":3,"file":"static/js/5053.e179e7b9.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/UpdateUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type UpdateUserProfileProps = KcProps & {\n    kcContext: KcContextBase.UpdateUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst UpdateUserProfile = memo((props: UpdateUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginProfileTitle\")}\n            formNode={\n                <form id=\"kc-update-profile-form\" className={clsx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}></div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        className={clsx(kcProps.kcButtonClass, kcProps.kcButtonPrimaryClass, kcProps.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        value={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        className={clsx(kcProps.kcButtonClass, kcProps.kcButtonDefaultClass, kcProps.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                        formNoValidate\n                                    >\n                                        {msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    className={clsx(\n                                        kcProps.kcButtonClass,\n                                        kcProps.kcButtonPrimaryClass,\n                                        kcProps.kcButtonBlockClass,\n                                        kcProps.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    defaultValue={msgStr(\"doSubmit\")}\n                                    disabled={!isFomSubmittable}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default UpdateUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={clsx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={clsx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={clsx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={clsx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n\n                                            return (\n                                                <>\n                                                    <style>{`#${divId} > span: { display: block; }`}</style>\n                                                    <span\n                                                        id={divId}\n                                                        className={clsx(props.kcInputErrorMessageClass)}\n                                                        style={{\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }}\n                                                        aria-live=\"polite\"\n                                                    >\n                                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                    </span>\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["UpdateUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","msg","msgStr","url","isAppInitiatedAction","useState","isFomSubmittable","setIsFomSubmittable","React","Object","headerNode","formNode","id","className","clsx","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","type","value","kcButtonDefaultClass","name","formNoValidate","kcButtonBlockClass","defaultValue","disabled","_a","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage"],"sourceRoot":""}