{"version":3,"file":"static/js/133.58f80c1e.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/Register.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\n\nexport type RegisterProps = KcProps & {\n    kcContext: KcContextBase.Register;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst Register = memo((props: RegisterProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={clsx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"email\", kcProps.kcFormGroupErrorClass))}>\n                        <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={clsx(kcProps.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={clsx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={clsx(kcProps.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"username\", kcProps.kcFormGroupErrorClass))}>\n                            <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={clsx(kcProps.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={clsx(kcProps.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div\n                                className={clsx(kcProps.kcFormGroupClass, messagesPerField.printIfExists(\"password\", kcProps.kcFormGroupErrorClass))}\n                            >\n                                <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={clsx(kcProps.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={clsx(\n                                    kcProps.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", kcProps.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={clsx(kcProps.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={clsx(kcProps.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={clsx(kcProps.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default Register;\n"],"names":["Register","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","React","Object","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","_a","lastName","_b","email","_c","autoComplete","registrationEmailAsUsername","username","_d","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value"],"sourceRoot":""}