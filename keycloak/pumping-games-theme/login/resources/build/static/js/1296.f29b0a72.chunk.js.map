{"version":3,"file":"static/js/1296.f29b0a72.chunk.js","mappings":"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","sources":["KcApp/screens/loginUsername/index.tsx","KcApp/screens/template/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React, { useState, memo } from 'react'\nimport DefaultTemplate from '../template'\nimport type { TemplateProps } from '../template'\nimport type { KcProps } from 'keycloakify'\nimport type { KcContextBase } from 'keycloakify'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport { useConstCallback } from 'powerhooks/useConstCallback'\nimport type { FormEventHandler } from 'react'\nimport type { I18n } from '../../i18n'\n\nexport type LoginUsernameProps = KcProps & {\n  kcContext: KcContextBase.LoginUsername\n  i18n: I18n\n  doFetchDefaultThemeResources?: boolean\n  Template?: (props: TemplateProps) => JSX.Element | null\n}\n\nconst LoginUsername = memo((props: LoginUsernameProps) => {\n  const {\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources = true,\n    Template = DefaultTemplate,\n    ...kcProps\n  } = props\n\n  const { social, realm, url, usernameHidden, login, registrationDisabled } = kcContext\n\n  const { msg, msgStr } = i18n\n\n  const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false)\n\n  const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n    e.preventDefault()\n\n    setIsLoginButtonDisabled(true)\n\n    const formElement = e.target as HTMLFormElement\n\n    //NOTE: Even if we login with email Keycloak expect username and password in\n    //the POST request.\n    formElement.querySelector(\"input[name='email']\")?.setAttribute('name', 'username')\n\n    formElement.submit()\n  })\n\n  return (\n    <Template\n      {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n      displayInfo={social.displayInfo}\n      displayWide={realm.password && social.providers !== undefined}\n      headerNode={msg('doLogIn')}\n      formNode={\n        <div\n          id='kc-form'\n          className={clsx(\n            realm.password && social.providers !== undefined && kcProps.kcContentWrapperClass\n          )}\n        >\n          <div\n            id='kc-form-wrapper'\n            className={clsx(\n              realm.password &&\n                social.providers && [\n                  kcProps.kcFormSocialAccountContentClass,\n                  kcProps.kcFormSocialAccountClass,\n                ]\n            )}\n          >\n            {realm.password && (\n              <form id='kc-form-login' onSubmit={onSubmit} action={url.loginAction} method='post'>\n                <div className={clsx(kcProps.kcFormGroupClass)}>\n                  {!usernameHidden &&\n                    (() => {\n                      const label = !realm.loginWithEmailAllowed\n                        ? 'username'\n                        : realm.registrationEmailAsUsername\n                        ? 'email'\n                        : 'usernameOrEmail'\n\n                      const autoCompleteHelper: typeof label =\n                        label === 'usernameOrEmail' ? 'username' : label\n\n                      return (\n                        <>\n                          <label\n                            htmlFor={autoCompleteHelper}\n                            className={clsx(kcProps.kcLabelClass)}\n                          >\n                            {msg(label)}\n                          </label>\n                          <input\n                            tabIndex={1}\n                            id={autoCompleteHelper}\n                            className={clsx(kcProps.kcInputClass)}\n                            //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                            //the browser how to pre fill the form but before submit we put it back\n                            //to username because it is what keycloak expects.\n                            name={autoCompleteHelper}\n                            defaultValue={login.username ?? ''}\n                            type='text'\n                            autoFocus={true}\n                            autoComplete='off'\n                          />\n                        </>\n                      )\n                    })()}\n                </div>\n                <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                  <div id='kc-form-options'>\n                    {realm.rememberMe && !usernameHidden && (\n                      <div className='checkbox'>\n                        <label>\n                          <input\n                            tabIndex={3}\n                            id='rememberMe'\n                            name='rememberMe'\n                            type='checkbox'\n                            {...(login.rememberMe\n                              ? {\n                                  checked: true,\n                                }\n                              : {})}\n                          />\n                          {msg('rememberMe')}\n                        </label>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div id='kc-form-buttons' className={clsx(kcProps.kcFormGroupClass)}>\n                  <input\n                    tabIndex={4}\n                    className={clsx(\n                      kcProps.kcButtonClass,\n                      kcProps.kcButtonPrimaryClass,\n                      kcProps.kcButtonBlockClass,\n                      kcProps.kcButtonLargeClass\n                    )}\n                    name='login'\n                    id='kc-login'\n                    type='submit'\n                    value={msgStr('doLogIn')}\n                    disabled={isLoginButtonDisabled}\n                  />\n                </div>\n              </form>\n            )}\n          </div>\n          {realm.password && social.providers !== undefined && (\n            <div\n              id='kc-social-providers'\n              className={clsx(\n                kcProps.kcFormSocialAccountContentClass,\n                kcProps.kcFormSocialAccountClass\n              )}\n            >\n              <ul\n                className={clsx(\n                  kcProps.kcFormSocialAccountListClass,\n                  social.providers.length > 4 && kcProps.kcFormSocialAccountDoubleListClass\n                )}\n              >\n                {social.providers.map(p => (\n                  <li key={p.providerId} className={clsx(kcProps.kcFormSocialAccountListLinkClass)}>\n                    <a\n                      href={p.loginUrl}\n                      id={`zocial-${p.alias}`}\n                      className={clsx('zocial', p.providerId)}\n                    >\n                      <span>{p.displayName}</span>\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      }\n      infoNode={\n        realm.password &&\n        realm.registrationAllowed &&\n        !registrationDisabled && (\n          <div id='kc-registration'>\n            <span>\n              {msg('noAccount')}\n              <a tabIndex={6} href={url.registrationUrl}>\n                {msg('doRegister')}\n              </a>\n            </span>\n          </div>\n        )\n      }\n    />\n  )\n})\n\nexport default LoginUsername\n","import type { KcContextBase, KcTemplateProps } from 'keycloakify'\nimport { pathJoin } from 'keycloakify/bin/tools/pathJoin'\nimport { assert } from 'keycloakify/lib/tools/assert'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport { headInsert } from 'keycloakify/lib/tools/headInsert'\nimport { useCallbackFactory } from 'powerhooks/useCallbackFactory'\nimport { useConstCallback } from 'powerhooks/useConstCallback'\nimport type { ReactNode } from 'react'\nimport { memo, useEffect, useReducer } from 'react'\nimport type { I18n } from '../../i18n'\n\nimport LogoApp from '../../../assets/teste-logo.png'\n\nexport type TemplateProps = {\n  displayInfo?: boolean\n  displayMessage?: boolean\n  displayRequiredFields?: boolean\n  displayWide?: boolean\n  showAnotherWayIfPresent?: boolean\n  headerNode: ReactNode\n  showUsernameNode?: ReactNode\n  formNode: ReactNode\n  infoNode?: ReactNode\n  /** If you write your own page you probably want\n   * to avoid pulling the default theme assets.\n   */\n  doFetchDefaultThemeResources: boolean\n} & { kcContext: KcContextBase; i18n: I18n } & KcTemplateProps\n\nconst Template = memo((props: TemplateProps) => {\n  const {\n    displayInfo = false,\n    displayMessage = true,\n    displayRequiredFields = false,\n    displayWide = false,\n    showAnotherWayIfPresent = true,\n    headerNode,\n    showUsernameNode = null,\n    formNode,\n    infoNode = null,\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources,\n  } = props\n\n  const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n\n\n  const onChangeLanguageClickFactory = useCallbackFactory(([kcLanguageTag]: [string]) =>\n    changeLocale(kcLanguageTag)\n  )\n\n  const onTryAnotherWayClick = useConstCallback(\n    () => (document.forms['kc-select-try-another-way-form' as never].submit(), false)\n  )\n\n  const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext\n\n  const [isExtraCssLoaded, setExtraCssLoaded] = useReducer(() => true, false)\n\n  useEffect(() => {\n    if (!doFetchDefaultThemeResources) {\n      setExtraCssLoaded()\n      return\n    }\n\n    let isUnmounted = false\n    const cleanups: (() => void)[] = []\n\n    const toArr = (x: string | readonly string[] | undefined) =>\n      typeof x === 'string' ? x.split(' ') : x ?? []\n\n    Promise.all(\n      [\n        ...toArr(props.stylesCommon).map(relativePath =>\n          pathJoin(url.resourcesCommonPath, relativePath)\n        ),\n        ...toArr(props.styles).map(relativePath => pathJoin(url.resourcesPath, relativePath)),\n      ]\n        .reverse()\n        .map(href =>\n          headInsert({\n            type: 'css',\n            href,\n            position: 'prepend',\n          })\n        )\n    ).then(() => {\n      if (isUnmounted) {\n        return\n      }\n\n      setExtraCssLoaded()\n    })\n\n    toArr(props.scripts).forEach(relativePath =>\n      headInsert({\n        type: 'javascript',\n        src: pathJoin(url.resourcesPath, relativePath),\n      })\n    )\n\n    if (props.kcHtmlClass !== undefined) {\n      const htmlClassList = document.getElementsByTagName('html')[0].classList\n\n      const tokens = clsx(props.kcHtmlClass).split(' ')\n\n      htmlClassList.add(...tokens)\n\n      cleanups.push(() => htmlClassList.remove(...tokens))\n    }\n\n    return () => {\n      isUnmounted = true\n\n      cleanups.forEach(f => f())\n    }\n  }, [props.kcHtmlClass])\n\n  if (!isExtraCssLoaded) {\n    return null\n  }\n\n  return (\n    <div className={clsx(props.kcLoginClass)}>\n      <div id='kc-header' className={clsx(props.kcHeaderClass)}>\n        <div id='kc-header-wrapper' className={clsx(props.kcHeaderWrapperClass)}>\n          <img src={LogoApp} alt='Logo App' />\n        </div>\n      </div>\n\n      <div className={clsx(props.kcFormCardClass, displayWide && props.kcFormCardAccountClass)}>\n        <header className={clsx(props.kcFormHeaderClass)}>\n          {realm.internationalizationEnabled &&\n            (assert(locale !== undefined), true) &&\n            locale.supported.length > 1 && (\n              <div id='kc-locale'>\n                <div id='kc-locale-wrapper' className={clsx(props.kcLocaleWrapperClass)}>\n                  <div className='kc-dropdown' id='kc-locale-dropdown'>\n                    <a href='#' id='kc-current-locale-link'>\n                      {labelBySupportedLanguageTag[currentLanguageTag]}\n                    </a>\n                    <ul>\n                      {locale.supported.map(({ languageTag }) => (\n                        <li key={languageTag} className='kc-dropdown-item'>\n                          <a href='#' onClick={onChangeLanguageClickFactory(languageTag)}>\n                            {labelBySupportedLanguageTag[languageTag]}\n                          </a>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n          {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n            displayRequiredFields ? (\n              <div className={clsx(props.kcContentWrapperClass)}>\n                <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                  <span className='subtitle'>\n                    <span className='required'>*</span>\n                    {msg('requiredFields')}\n                  </span>\n                </div>\n                <div className='col-md-10'>\n                  <h1 id='kc-page-title'>{headerNode}</h1>\n                </div>\n              </div>\n            ) : (\n              <h1 id='kc-page-title'>{headerNode}</h1>\n            )\n          ) : displayRequiredFields ? (\n            <div className={clsx(props.kcContentWrapperClass)}>\n              <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                <span className='subtitle'>\n                  <span className='required'>*</span> {msg('requiredFields')}\n                </span>\n              </div>\n              <div className='col-md-10'>\n                {showUsernameNode}\n                <div className={clsx(props.kcFormGroupClass)}>\n                  <div id='kc-username'>\n                    <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                    <a id='reset-login' href={url.loginRestartFlowUrl}>\n                      <div className='kc-login-tooltip'>\n                        <i className={clsx(props.kcResetFlowIcon)}></i>\n                        <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {showUsernameNode}\n              <div className={clsx(props.kcFormGroupClass)}>\n                <div id='kc-username'>\n                  <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                  <a id='reset-login' href={url.loginRestartFlowUrl}>\n                    <div className='kc-login-tooltip'>\n                      <i className={clsx(props.kcResetFlowIcon)}></i>\n                      <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                    </div>\n                  </a>\n                </div>\n              </div>\n            </>\n          )}\n        </header>\n        <div id='kc-content'>\n          <div id='kc-content-wrapper'>\n            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n            {displayMessage &&\n              message !== undefined &&\n              (message.type !== 'warning' || !isAppInitiatedAction) && (\n                <div className={clsx('alert', `alert-${message.type}`)}>\n                  {message.type === 'success' && (\n                    <span\n                      className={clsx(props.kcFeedbackSuccessIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'warning' && (\n                    <span\n                      className={clsx(props.kcFeedbackWarningIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'error' && (\n                    <span\n                      className={clsx(props.kcFeedbackErrorIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'info' && (\n                    <span\n                      className={clsx(props.kcFeedbackInfoIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  <span\n                    className='kc-feedback-text'\n                    style={{ background: 'none' }}\n                    dangerouslySetInnerHTML={{\n                      __html: message.summary,\n                    }}\n                  />\n                </div>\n              )}\n            {formNode}\n            {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n              <form\n                id='kc-select-try-another-way-form'\n                action={url.loginAction}\n                method='post'\n                className={clsx(displayWide && props.kcContentWrapperClass)}\n              >\n                <div\n                  className={clsx(\n                    displayWide && [\n                      props.kcFormSocialAccountContentClass,\n                      props.kcFormSocialAccountClass,\n                    ]\n                  )}\n                >\n                  <div className={clsx(props.kcFormGroupClass)}>\n                    <input type='hidden' name='tryAnotherWay' value='on' />\n                    <a href='#' id='try-another-way' onClick={onTryAnotherWayClick}>\n                      {msg('doTryAnotherWay')}\n                    </a>\n                  </div>\n                </div>\n              </form>\n            )}\n            {displayInfo && (\n              <div id='kc-info' className={clsx(props.kcSignUpClass)}>\n                <div id='kc-info-wrapper' className={clsx(props.kcInfoAreaWrapperClass)}>\n                  {infoNode}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Template\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["LoginUsername","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","social","realm","url","usernameHidden","login","registrationDisabled","msg","msgStr","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","clsx","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoFocus","autoComplete","kcFormSettingClass","rememberMe","checked","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","kcFormSocialAccountListLinkClass","href","loginUrl","alias","providerId","displayName","infoNode","registrationAllowed","registrationUrl","displayMessage","displayRequiredFields","showAnotherWayIfPresent","showUsernameNode","changeLocale","labelBySupportedLanguageTag","currentLanguageTag","onChangeLanguageClickFactory","useCallbackFactory","kcLanguageTag","onTryAnotherWayClick","document","forms","locale","auth","message","isAppInitiatedAction","useReducer","isExtraCssLoaded","setExtraCssLoaded","useEffect","isUnmounted","cleanups","toArr","x","split","Promise","all","stylesCommon","relativePath","pathJoin","resourcesCommonPath","styles","resourcesPath","reverse","headInsert","position","then","scripts","forEach","src","kcHtmlClass","htmlClassList","getElementsByTagName","classList","tokens","add","push","remove","f","kcLoginClass","kcHeaderClass","kcHeaderWrapperClass","LogoApp","alt","kcFormCardClass","kcFormCardAccountClass","kcFormHeaderClass","internationalizationEnabled","assert","supported","kcLocaleWrapperClass","languageTag","onClick","showUsername","showResetCredentials","kcLabelWrapperClass","attemptedUsername","loginRestartFlowUrl","kcResetFlowIcon","kcFeedbackSuccessIcon","style","background","kcFeedbackWarningIcon","kcFeedbackErrorIcon","kcFeedbackInfoIcon","dangerouslySetInnerHTML","__html","summary","showTryAnotherWayLink","kcSignUpClass","kcInfoAreaWrapperClass","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}