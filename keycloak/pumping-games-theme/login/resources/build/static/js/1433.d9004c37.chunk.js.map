{"version":3,"file":"static/js/1433.d9004c37.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginUsername.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport type { FormEventHandler } from \"react\";\nimport type { I18n } from \"../i18n\";\n\nexport type LoginUsernameProps = KcProps & {\n    kcContext: KcContextBase.LoginUsername;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst LoginUsername = memo((props: LoginUsernameProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { social, realm, url, usernameHidden, login, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && kcProps.kcContentWrapperClass)}>\n                    <div\n                        id=\"kc-form-wrapper\"\n                        className={clsx(\n                            realm.password && social.providers && [kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass]\n                        )}\n                    >\n                        {realm.password && (\n                            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                <div className={clsx(kcProps.kcFormGroupClass)}>\n                                    {!usernameHidden &&\n                                        (() => {\n                                            const label = !realm.loginWithEmailAllowed\n                                                ? \"username\"\n                                                : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                            const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                            return (\n                                                <>\n                                                    <label htmlFor={autoCompleteHelper} className={clsx(kcProps.kcLabelClass)}>\n                                                        {msg(label)}\n                                                    </label>\n                                                    <input\n                                                        tabIndex={1}\n                                                        id={autoCompleteHelper}\n                                                        className={clsx(kcProps.kcInputClass)}\n                                                        //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                        //the browser how to pre fill the form but before submit we put it back\n                                                        //to username because it is what keycloak expects.\n                                                        name={autoCompleteHelper}\n                                                        defaultValue={login.username ?? \"\"}\n                                                        type=\"text\"\n                                                        autoFocus={true}\n                                                        autoComplete=\"off\"\n                                                    />\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                                <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameHidden && (\n                                            <div className=\"checkbox\">\n                                                <label>\n                                                    <input\n                                                        tabIndex={3}\n                                                        id=\"rememberMe\"\n                                                        name=\"rememberMe\"\n                                                        type=\"checkbox\"\n                                                        {...(login.rememberMe\n                                                            ? {\n                                                                  \"checked\": true\n                                                              }\n                                                            : {})}\n                                                    />\n                                                    {msg(\"rememberMe\")}\n                                                </label>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                                <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormGroupClass)}>\n                                    <input\n                                        tabIndex={4}\n                                        className={clsx(\n                                            kcProps.kcButtonClass,\n                                            kcProps.kcButtonPrimaryClass,\n                                            kcProps.kcButtonBlockClass,\n                                            kcProps.kcButtonLargeClass\n                                        )}\n                                        name=\"login\"\n                                        id=\"kc-login\"\n                                        type=\"submit\"\n                                        value={msgStr(\"doLogIn\")}\n                                        disabled={isLoginButtonDisabled}\n                                    />\n                                </div>\n                            </form>\n                        )}\n                    </div>\n                    {realm.password && social.providers !== undefined && (\n                        <div id=\"kc-social-providers\" className={clsx(kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass)}>\n                            <ul\n                                className={clsx(\n                                    kcProps.kcFormSocialAccountListClass,\n                                    social.providers.length > 4 && kcProps.kcFormSocialAccountDoubleListClass\n                                )}\n                            >\n                                {social.providers.map(p => (\n                                    <li key={p.providerId} className={clsx(kcProps.kcFormSocialAccountListLinkClass)}>\n                                        <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                            <span>{p.displayName}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            }\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        />\n    );\n});\n\nexport default LoginUsername;\n"],"names":["LoginUsername","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","social","realm","url","usernameHidden","login","registrationDisabled","msg","msgStr","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","_a","setAttribute","submit","React","Object","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","clsx","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoFocus","autoComplete","kcFormSettingClass","rememberMe","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","href","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}