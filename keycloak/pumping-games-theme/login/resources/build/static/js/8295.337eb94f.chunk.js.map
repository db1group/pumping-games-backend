{"version":3,"file":"static/js/8295.337eb94f.chunk.js","mappings":"+OASMA,GAAWC,EAAAA,EAAAA,OACf,YAA6F,IAAD,QAAzFC,EAAyF,EAAzFA,UAAWC,EAA8E,EAA9EA,KAASC,GAAqE,YAExFC,EAOEH,EAPFG,IACAC,EAMEJ,EANFI,iBACAC,EAKEL,EALFK,SACAC,EAIEN,EAJFM,MACAC,EAGEP,EAHFO,iBACAC,EAEER,EAFFQ,kBACAC,EACET,EADFS,iBAGMC,EAAgBT,EAAhBS,IAAKC,EAAWV,EAAXU,OAMb,OAJAC,QAAQC,IAAR,gEAC2Db,EAAUc,yBAInE,SAAC,KAAD,2BACQd,UAAAA,EAAWC,KAAAA,GAASC,IAD5B,IAEEa,8BAA8B,EAC9BC,YACE,iCACE,eAAIC,MAAO,CAAEC,MAAO,QAASC,UAAW,SAAUC,WAAY,IAAKC,SAAU,QAA7E,SACGX,EAAI,oBAEP,gBACEY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsB,2BACtBP,MAAO,CAAEQ,QAAS,OAAQC,eAAgB,SAAUC,WAAY,UAFlE,UAIE,kBAAMV,MAAO,CAAEI,SAAU,WAAYD,WAAY,IAAKQ,OAAQ,UAA9D,oCACuB,KACrB,cAAGC,KAAM1B,EAAI2B,SAAUb,MAAO,CAAEI,SAAU,WAAYD,WAAY,KAAlE,SACGV,EAAI,yBAMfqB,UACE,kBACEC,GAAG,mBACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM+B,aACtBC,OAAQ/B,EAAIgC,mBACZC,OAAO,OAJT,WAME,iBACEd,WAAWC,EAAAA,EAAAA,GACTrB,EAAMmC,iBACNjC,EAAiBkC,cAAc,YAAapC,EAAMqC,wBAHtD,WAME,gBAAKjB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,qBAA3B,UACE,kBAAOC,QAAQ,YAAYnB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwC,cAAjD,SACGhC,EAAI,kBAGT,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,kBACEC,KAAK,OACLZ,GAAG,YACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2C,cACtBC,KAAK,YACLC,aAAY,UAAE1C,EAAS2C,SAASC,iBAApB,QAAiC,WAKnD,iBACE3B,WAAWC,EAAAA,EAAAA,GACTrB,EAAMmC,iBACNjC,EAAiBkC,cAAc,WAAYpC,EAAMqC,wBAHrD,WAME,gBAAKjB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,qBAA3B,UACE,kBAAOC,QAAQ,WAAWnB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwC,cAAhD,SACGhC,EAAI,iBAGT,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,kBACEC,KAAK,OACLZ,GAAG,WACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2C,cACtBC,KAAK,WACLC,aAAY,UAAE1C,EAAS2C,SAASE,gBAApB,QAAgC,WAKlD,iBACE5B,WAAWC,EAAAA,EAAAA,GACTrB,EAAMmC,iBACNjC,EAAiBkC,cAAc,QAASpC,EAAMqC,wBAHlD,WAME,gBAAKjB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,qBAA3B,UACE,kBAAOC,QAAQ,QAAQnB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwC,cAA7C,SACGhC,EAAI,cAGT,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,kBACEC,KAAK,OACLZ,GAAG,QACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2C,cACtBC,KAAK,QACLC,aAAY,UAAE1C,EAAS2C,SAASG,aAApB,QAA6B,GACzCC,aAAa,gBAIjB9C,EAAM+C,8BACN,iBACE/B,WAAWC,EAAAA,EAAAA,GACTrB,EAAMmC,iBACNjC,EAAiBkC,cAAc,WAAYpC,EAAMqC,wBAHrD,WAME,gBAAKjB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,qBAA3B,UACE,kBAAOC,QAAQ,WAAWnB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwC,cAAhD,SACGhC,EAAI,iBAGT,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,kBACEC,KAAK,OACLZ,GAAG,WACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2C,cACtBC,KAAK,WACLC,aAAY,UAAE1C,EAAS2C,SAASM,gBAApB,QAAgC,GAC5CF,aAAa,kBAKpB7C,IACC,iCACE,iBACEe,WAAWC,EAAAA,EAAAA,GACTrB,EAAMmC,iBACNjC,EAAiBkC,cAAc,WAAYpC,EAAMqC,wBAHrD,WAME,gBAAKjB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,qBAA3B,UACE,kBAAOC,QAAQ,WAAWnB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwC,cAAhD,SACGhC,EAAI,iBAGT,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,kBACEC,KAAK,WACLZ,GAAG,WACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2C,cACtBC,KAAK,WACLM,aAAa,uBAKnB,iBACE9B,WAAWC,EAAAA,EAAAA,GACTrB,EAAMmC,iBACNjC,EAAiBkC,cAAc,mBAAoBpC,EAAMqC,wBAH7D,WAME,gBAAKjB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,qBAA3B,UACE,kBAAOC,QAAQ,mBAAmBnB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwC,cAAxD,SACGhC,EAAI,wBAGT,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,kBACEC,KAAK,WACLZ,GAAG,mBACHV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2C,cACtBC,KAAK,6BAMdtC,IACC,gBAAKc,UAAU,aAAf,UACE,gBAAKA,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyC,qBAA3B,UACE,gBACErB,UAAU,cACV,YAAU,UACV,eAAcb,SAMtB,gBAAKa,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMmC,kBAA3B,UACE,gBAAKL,GAAG,kBAAkBV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMqD,oBAAhD,UACE,kBACEjC,WAAWC,EAAAA,EAAAA,GACTrB,EAAMsD,cACNtD,EAAMuD,qBACNvD,EAAMwD,mBACNxD,EAAMyD,oBAERf,KAAK,SACLgB,MAAOjD,EAAO,yBAQ7B,IAGH,W,sNC+DA,GAnQiBZ,EAAAA,EAAAA,OAAK,SAACG,GACrB,MAaIA,EAZF2D,YAAAA,OADF,WAaI3D,EAXF4D,eAAAA,OAFF,WAaI5D,EAVF6D,sBAAAA,OAHF,WAaI7D,EATF8D,YAAAA,OAJF,WAaI9D,EARF+D,wBAAAA,OALF,SAMEjD,EAOEd,EAPFc,WANF,EAaId,EANFgE,iBAAAA,OAPF,MAOqB,KAPrB,EAQEnC,EAKE7B,EALF6B,SARF,EAaI7B,EAJFiE,SAAAA,OATF,MASa,KATb,EAUEnE,EAGEE,EAHFF,UACAC,EAEEC,EAFFD,KACAc,EACEb,EADFa,6BAGML,EAAuET,EAAvES,IAAK0D,EAAkEnE,EAAlEmE,aAAcC,EAAoDpE,EAApDoE,4BAA6BC,EAAuBrE,EAAvBqE,mBAElDC,GAA+BC,EAAAA,EAAAA,qBAAmB,gBAAEC,GAAF,sBACtDL,EAAaK,EADyC,IAIlDC,GAAuBC,EAAAA,EAAAA,mBAC3B,kBAAOC,SAASC,MAAM,kCAA2CC,UAAU,CAA3E,IAGMxE,EAA4DN,EAA5DM,MAAOyE,EAAqD/E,EAArD+E,OAAQC,EAA6ChF,EAA7CgF,KAAM7E,EAAuCH,EAAvCG,IAAK8E,EAAkCjF,EAAlCiF,QAASC,EAAyBlF,EAAzBkF,qBAE3C,GAA8CC,EAAAA,EAAAA,aAAW,kBAAM,CAAN,IAAY,GAArE,eAAOC,EAAP,KAAyBC,EAAzB,KA6DA,OA3DAC,EAAAA,EAAAA,YAAU,WACR,GAAKvE,EAAL,CAKA,IAAIwE,GAAc,EACZC,EAA2B,GAE3BC,EAAQ,SAACC,GAAD,MACC,kBAANA,EAAiBA,EAAEC,MAAM,KAAhC,OAAuCD,QAAvC,IAAuCA,EAAAA,EAAK,EADhC,EAiCd,GA9BAE,QAAQC,IACN,kBACKJ,EAAMvF,EAAM4F,cAAcC,KAAI,SAAAC,GAAY,OAC3CC,EAAAA,EAAAA,UAAS9F,EAAI+F,oBAAqBF,EADS,MAD/C,OAIKP,EAAMvF,EAAMiG,QAAQJ,KAAI,SAAAC,GAAY,OAAIC,EAAAA,EAAAA,UAAS9F,EAAIiG,cAAeJ,EAAhC,MAEtCK,UACAN,KAAI,SAAAlE,GAAI,OACPyE,EAAAA,EAAAA,GAAW,CACT1D,KAAM,MACNf,KAAAA,EACA0E,SAAU,WAJL,KAOXC,MAAK,WACDjB,GAIJF,GACD,IAEDI,EAAMvF,EAAMuG,SAASC,SAAQ,SAAAV,GAAY,OACvCM,EAAAA,EAAAA,GAAW,CACT1D,KAAM,aACN+D,KAAKV,EAAAA,EAAAA,UAAS9F,EAAIiG,cAAeJ,IAHI,SAOfY,IAAtB1G,EAAM2G,YAA2B,CACnC,IAAMC,EAAgBlC,SAASmC,qBAAqB,QAAQ,GAAGC,UAEzDC,GAAS1F,EAAAA,EAAAA,GAAKrB,EAAM2G,aAAalB,MAAM,KAE7CmB,EAAcI,IAAd,MAAAJ,GAAa,OAAQG,IAErBzB,EAAS2B,MAAK,kBAAML,EAAcM,OAAd,MAAAN,GAAa,OAAWG,GAA9B,GACf,CAED,OAAO,WACL1B,GAAc,EAEdC,EAASkB,SAAQ,SAAAW,GAAC,OAAIA,GAAJ,GACnB,CApDA,CAFChC,GAuDH,GAAE,CAACnF,EAAM2G,cAELzB,GAKH,iBAAK9D,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMoH,cAA3B,WACE,gBAAKtF,GAAG,YAAYV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMqH,eAA1C,UACE,gBAAKvF,GAAG,oBAAoBV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsH,sBAAlD,UACE,gBAAKb,IAAKc,EAASC,IAAI,kBAI3B,iBAAKpG,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyH,gBAAiB3D,GAAe9D,EAAM0H,wBAAjE,WACE,oBAAQtG,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2H,mBAA9B,UACGvH,EAAMwH,+BACJC,EAAAA,EAAAA,QAAkBnB,IAAX7B,IAAuB,IAC/BA,EAAOiD,UAAUC,OAAS,IACxB,gBAAKjG,GAAG,YAAR,UACE,gBAAKA,GAAG,oBAAoBV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMgI,sBAAlD,UACE,iBAAK5G,UAAU,cAAcU,GAAG,qBAAhC,WACE,cAAGH,KAAK,IAAIG,GAAG,yBAAf,SACGqC,EAA4BC,MAE/B,wBACGS,EAAOiD,UAAUjC,KAAI,gBAAGoC,EAAH,EAAGA,YAAH,OACpB,eAAsB7G,UAAU,mBAAhC,UACE,cAAGO,KAAK,IAAIuG,QAAS7D,EAA6B4D,GAAlD,SACG9D,EAA4B8D,MAFxBA,EADW,kBAYtBvB,IAAT5B,IAAsBA,EAAKqD,cAAiBrD,EAAKsD,qBAClDvE,GACE,iBAAKzC,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMqI,uBAA3B,WACE,gBAAKjH,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,oBAAqB,YAAhD,UACE,kBAAMlB,UAAU,WAAhB,WACE,iBAAMA,UAAU,WAAhB,eACCZ,EAAI,wBAGT,gBAAKY,UAAU,YAAf,UACE,eAAIU,GAAG,gBAAP,SAAwBhB,UAI5B,eAAIgB,GAAG,gBAAP,SAAwBhB,IAExB+C,GACF,iBAAKzC,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMqI,uBAA3B,WACE,gBAAKjH,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsC,oBAAqB,YAAhD,UACE,kBAAMlB,UAAU,WAAhB,WACE,iBAAMA,UAAU,WAAhB,eADF,IACuCZ,EAAI,wBAG7C,iBAAKY,UAAU,YAAf,UACG4C,GACD,gBAAK5C,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMmC,kBAA3B,UACE,iBAAKL,GAAG,cAAR,WACE,kBAAOA,GAAG,wBAAV,gBAAmCgD,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMwD,qBACzC,cAAGxG,GAAG,cAAcH,KAAM1B,EAAIsI,oBAA9B,UACE,iBAAKnH,UAAU,mBAAf,WACE,cAAGA,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwI,oBACzB,iBAAMpH,UAAU,kBAAhB,SAAmCZ,EAAI,0CAQnD,gCACGwD,GACD,gBAAK5C,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMmC,kBAA3B,UACE,iBAAKL,GAAG,cAAR,WACE,kBAAOA,GAAG,wBAAV,gBAAmCgD,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMwD,qBACzC,cAAGxG,GAAG,cAAcH,KAAM1B,EAAIsI,oBAA9B,UACE,iBAAKnH,UAAU,mBAAf,WACE,cAAGA,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMwI,oBACzB,iBAAMpH,UAAU,kBAAhB,SAAmCZ,EAAI,0CAQrD,gBAAKsB,GAAG,aAAR,UACE,iBAAKA,GAAG,qBAAR,UAEG8B,QACa8C,IAAZ3B,IACkB,YAAjBA,EAAQrC,OAAuBsC,KAC9B,iBAAK5D,WAAWC,EAAAA,EAAAA,GAAK,QAAD,gBAAmB0D,EAAQrC,OAA/C,UACoB,YAAjBqC,EAAQrC,OACP,iBACEtB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMyI,uBACtB1H,MAAO,CAAE2H,WAAY,UAGP,YAAjB3D,EAAQrC,OACP,iBACEtB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM2I,uBACtB5H,MAAO,CAAE2H,WAAY,UAGP,UAAjB3D,EAAQrC,OACP,iBACEtB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM4I,qBACtB7H,MAAO,CAAE2H,WAAY,UAGP,SAAjB3D,EAAQrC,OACP,iBACEtB,WAAWC,EAAAA,EAAAA,GAAKrB,EAAM6I,oBACtB9H,MAAO,CAAE2H,WAAY,WAGzB,iBACEtH,UAAU,mBACVL,MAAO,CAAE2H,WAAY,QACrBI,wBAAyB,CACvBC,OAAQhE,EAAQiE,cAKzBnH,OACS6E,IAAT5B,GAAsBA,EAAKmE,uBAAyBlF,IACnD,iBACEjC,GAAG,iCACHE,OAAQ/B,EAAIiJ,YACZhH,OAAO,OACPd,WAAWC,EAAAA,EAAAA,GAAKyC,GAAe9D,EAAMqI,uBAJvC,UAME,gBACEjH,WAAWC,EAAAA,EAAAA,GACTyC,GAAe,CACb9D,EAAMmJ,gCACNnJ,EAAMoJ,2BAJZ,UAQE,iBAAKhI,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMmC,kBAA3B,WACE,kBAAOO,KAAK,SAASE,KAAK,gBAAgBc,MAAM,QAChD,cAAG/B,KAAK,IAAIG,GAAG,kBAAkBoG,QAAS1D,EAA1C,SACGhE,EAAI,4BAMdmD,IACC,gBAAK7B,GAAG,UAAUV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMqJ,eAAxC,UACE,gBAAKvH,GAAG,kBAAkBV,WAAWC,EAAAA,EAAAA,GAAKrB,EAAMsJ,wBAAhD,SACGrF,iBA9JR,IAuKV,G,uBC7Rc,SAASsF,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IAEIE,EAAKC,EAFLC,EAAS,CAAC,EACVC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAW9B,OAAQ4B,IACjCD,EAAMG,EAAWF,GACbF,EAASO,QAAQN,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,CACT,CDVe,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOG,sBAAuB,CAChC,IAAIC,EAAmBJ,OAAOG,sBAAsBT,GAEpD,IAAKG,EAAI,EAAGA,EAAIO,EAAiBnC,OAAQ4B,IACvCD,EAAMQ,EAAiBP,GACnBF,EAASO,QAAQN,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,GAEzB,CAEA,OAAOE,CACT,C","sources":["KcApp/screens/register/index.tsx","KcApp/screens/template/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import type { KcProps } from 'keycloakify'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport { memo } from 'react'\nimport type { I18n } from '../../i18n'\nimport type { KcContext } from '../../kcContext'\nimport Template from '../template'\n\ntype KcContext_Register = Extract<KcContext, { pageId: 'register.ftl' }>\n\nconst Register = memo(\n  ({ kcContext, i18n, ...props }: { kcContext: KcContext_Register; i18n: I18n } & KcProps) => {\n    const {\n      url,\n      messagesPerField,\n      register,\n      realm,\n      passwordRequired,\n      recaptchaRequired,\n      recaptchaSiteKey,\n    } = kcContext\n\n    const { msg, msgStr } = i18n\n\n    console.log(\n      `NOTE: It is up to you do do something meaningful with ${kcContext.authorizedMailDomains}`\n    )\n\n    return (\n      <Template\n        {...{ kcContext, i18n, ...props }}\n        doFetchDefaultThemeResources={true}\n        headerNode={\n          <>\n            <h1 style={{ color: 'black', textAlign: 'center', fontWeight: 700, fontSize: '2rem' }}>\n              {msg('registerTitle')}\n            </h1>\n            <div\n              className={clsx(props.kcFormOptionsWrapperClass)}\n              style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n            >\n              <span style={{ fontSize: '0.875rem', fontWeight: 700, margin: '1rem 0' }}>\n                JÁ POSSUI UMA CONTA?{' '}\n                <a href={url.loginUrl} style={{ fontSize: '0.875rem', fontWeight: 700 }}>\n                  {msg('backToLogin')}\n                </a>\n              </span>\n            </div>\n          </>\n        }\n        formNode={\n          <form\n            id='kc-register-form'\n            className={clsx(props.kcFormClass)}\n            action={url.registrationAction}\n            method='post'\n          >\n            <div\n              className={clsx(\n                props.kcFormGroupClass,\n                messagesPerField.printIfExists('firstName', props.kcFormGroupErrorClass)\n              )}\n            >\n              <div className={clsx(props.kcLabelWrapperClass)}>\n                <label htmlFor='firstName' className={clsx(props.kcLabelClass)}>\n                  {msg('firstName')}\n                </label>\n              </div>\n              <div className={clsx(props.kcInputWrapperClass)}>\n                <input\n                  type='text'\n                  id='firstName'\n                  className={clsx(props.kcInputClass)}\n                  name='firstName'\n                  defaultValue={register.formData.firstName ?? ''}\n                />\n              </div>\n            </div>\n\n            <div\n              className={clsx(\n                props.kcFormGroupClass,\n                messagesPerField.printIfExists('lastName', props.kcFormGroupErrorClass)\n              )}\n            >\n              <div className={clsx(props.kcLabelWrapperClass)}>\n                <label htmlFor='lastName' className={clsx(props.kcLabelClass)}>\n                  {msg('lastName')}\n                </label>\n              </div>\n              <div className={clsx(props.kcInputWrapperClass)}>\n                <input\n                  type='text'\n                  id='lastName'\n                  className={clsx(props.kcInputClass)}\n                  name='lastName'\n                  defaultValue={register.formData.lastName ?? ''}\n                />\n              </div>\n            </div>\n\n            <div\n              className={clsx(\n                props.kcFormGroupClass,\n                messagesPerField.printIfExists('email', props.kcFormGroupErrorClass)\n              )}\n            >\n              <div className={clsx(props.kcLabelWrapperClass)}>\n                <label htmlFor='email' className={clsx(props.kcLabelClass)}>\n                  {msg('email')}\n                </label>\n              </div>\n              <div className={clsx(props.kcInputWrapperClass)}>\n                <input\n                  type='text'\n                  id='email'\n                  className={clsx(props.kcInputClass)}\n                  name='email'\n                  defaultValue={register.formData.email ?? ''}\n                  autoComplete='email'\n                />\n              </div>\n            </div>\n            {!realm.registrationEmailAsUsername && (\n              <div\n                className={clsx(\n                  props.kcFormGroupClass,\n                  messagesPerField.printIfExists('username', props.kcFormGroupErrorClass)\n                )}\n              >\n                <div className={clsx(props.kcLabelWrapperClass)}>\n                  <label htmlFor='username' className={clsx(props.kcLabelClass)}>\n                    {msg('username')}\n                  </label>\n                </div>\n                <div className={clsx(props.kcInputWrapperClass)}>\n                  <input\n                    type='text'\n                    id='username'\n                    className={clsx(props.kcInputClass)}\n                    name='username'\n                    defaultValue={register.formData.username ?? ''}\n                    autoComplete='username'\n                  />\n                </div>\n              </div>\n            )}\n            {passwordRequired && (\n              <>\n                <div\n                  className={clsx(\n                    props.kcFormGroupClass,\n                    messagesPerField.printIfExists('password', props.kcFormGroupErrorClass)\n                  )}\n                >\n                  <div className={clsx(props.kcLabelWrapperClass)}>\n                    <label htmlFor='password' className={clsx(props.kcLabelClass)}>\n                      {msg('password')}\n                    </label>\n                  </div>\n                  <div className={clsx(props.kcInputWrapperClass)}>\n                    <input\n                      type='password'\n                      id='password'\n                      className={clsx(props.kcInputClass)}\n                      name='password'\n                      autoComplete='new-password'\n                    />\n                  </div>\n                </div>\n\n                <div\n                  className={clsx(\n                    props.kcFormGroupClass,\n                    messagesPerField.printIfExists('password-confirm', props.kcFormGroupErrorClass)\n                  )}\n                >\n                  <div className={clsx(props.kcLabelWrapperClass)}>\n                    <label htmlFor='password-confirm' className={clsx(props.kcLabelClass)}>\n                      {msg('passwordConfirm')}\n                    </label>\n                  </div>\n                  <div className={clsx(props.kcInputWrapperClass)}>\n                    <input\n                      type='password'\n                      id='password-confirm'\n                      className={clsx(props.kcInputClass)}\n                      name='password-confirm'\n                    />\n                  </div>\n                </div>\n              </>\n            )}\n            {recaptchaRequired && (\n              <div className='form-group'>\n                <div className={clsx(props.kcInputWrapperClass)}>\n                  <div\n                    className='g-recaptcha'\n                    data-size='compact'\n                    data-sitekey={recaptchaSiteKey}\n                  ></div>\n                </div>\n              </div>\n            )}\n\n            <div className={clsx(props.kcFormGroupClass)}>\n              <div id='kc-form-buttons' className={clsx(props.kcFormButtonsClass)}>\n                <input\n                  className={clsx(\n                    props.kcButtonClass,\n                    props.kcButtonPrimaryClass,\n                    props.kcButtonBlockClass,\n                    props.kcButtonLargeClass\n                  )}\n                  type='submit'\n                  value={msgStr('doRegister')}\n                />\n              </div>\n            </div>\n          </form>\n        }\n      />\n    )\n  }\n)\n\nexport default Register\n","import type { KcContextBase, KcTemplateProps } from 'keycloakify'\nimport { pathJoin } from 'keycloakify/bin/tools/pathJoin'\nimport { assert } from 'keycloakify/lib/tools/assert'\nimport { clsx } from 'keycloakify/lib/tools/clsx'\nimport { headInsert } from 'keycloakify/lib/tools/headInsert'\nimport { useCallbackFactory } from 'powerhooks/useCallbackFactory'\nimport { useConstCallback } from 'powerhooks/useConstCallback'\nimport type { ReactNode } from 'react'\nimport { memo, useEffect, useReducer } from 'react'\nimport type { I18n } from '../../i18n'\n\nimport LogoApp from '../../../assets/teste-logo.png'\n\nexport type TemplateProps = {\n  displayInfo?: boolean\n  displayMessage?: boolean\n  displayRequiredFields?: boolean\n  displayWide?: boolean\n  showAnotherWayIfPresent?: boolean\n  headerNode: ReactNode\n  showUsernameNode?: ReactNode\n  formNode: ReactNode\n  infoNode?: ReactNode\n  /** If you write your own page you probably want\n   * to avoid pulling the default theme assets.\n   */\n  doFetchDefaultThemeResources: boolean\n} & { kcContext: KcContextBase; i18n: I18n } & KcTemplateProps\n\nconst Template = memo((props: TemplateProps) => {\n  const {\n    displayInfo = false,\n    displayMessage = true,\n    displayRequiredFields = false,\n    displayWide = false,\n    showAnotherWayIfPresent = true,\n    headerNode,\n    showUsernameNode = null,\n    formNode,\n    infoNode = null,\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources,\n  } = props\n\n  const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n\n\n  const onChangeLanguageClickFactory = useCallbackFactory(([kcLanguageTag]: [string]) =>\n    changeLocale(kcLanguageTag)\n  )\n\n  const onTryAnotherWayClick = useConstCallback(\n    () => (document.forms['kc-select-try-another-way-form' as never].submit(), false)\n  )\n\n  const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext\n\n  const [isExtraCssLoaded, setExtraCssLoaded] = useReducer(() => true, false)\n\n  useEffect(() => {\n    if (!doFetchDefaultThemeResources) {\n      setExtraCssLoaded()\n      return\n    }\n\n    let isUnmounted = false\n    const cleanups: (() => void)[] = []\n\n    const toArr = (x: string | readonly string[] | undefined) =>\n      typeof x === 'string' ? x.split(' ') : x ?? []\n\n    Promise.all(\n      [\n        ...toArr(props.stylesCommon).map(relativePath =>\n          pathJoin(url.resourcesCommonPath, relativePath)\n        ),\n        ...toArr(props.styles).map(relativePath => pathJoin(url.resourcesPath, relativePath)),\n      ]\n        .reverse()\n        .map(href =>\n          headInsert({\n            type: 'css',\n            href,\n            position: 'prepend',\n          })\n        )\n    ).then(() => {\n      if (isUnmounted) {\n        return\n      }\n\n      setExtraCssLoaded()\n    })\n\n    toArr(props.scripts).forEach(relativePath =>\n      headInsert({\n        type: 'javascript',\n        src: pathJoin(url.resourcesPath, relativePath),\n      })\n    )\n\n    if (props.kcHtmlClass !== undefined) {\n      const htmlClassList = document.getElementsByTagName('html')[0].classList\n\n      const tokens = clsx(props.kcHtmlClass).split(' ')\n\n      htmlClassList.add(...tokens)\n\n      cleanups.push(() => htmlClassList.remove(...tokens))\n    }\n\n    return () => {\n      isUnmounted = true\n\n      cleanups.forEach(f => f())\n    }\n  }, [props.kcHtmlClass])\n\n  if (!isExtraCssLoaded) {\n    return null\n  }\n\n  return (\n    <div className={clsx(props.kcLoginClass)}>\n      <div id='kc-header' className={clsx(props.kcHeaderClass)}>\n        <div id='kc-header-wrapper' className={clsx(props.kcHeaderWrapperClass)}>\n          <img src={LogoApp} alt='Logo App' />\n        </div>\n      </div>\n\n      <div className={clsx(props.kcFormCardClass, displayWide && props.kcFormCardAccountClass)}>\n        <header className={clsx(props.kcFormHeaderClass)}>\n          {realm.internationalizationEnabled &&\n            (assert(locale !== undefined), true) &&\n            locale.supported.length > 1 && (\n              <div id='kc-locale'>\n                <div id='kc-locale-wrapper' className={clsx(props.kcLocaleWrapperClass)}>\n                  <div className='kc-dropdown' id='kc-locale-dropdown'>\n                    <a href='#' id='kc-current-locale-link'>\n                      {labelBySupportedLanguageTag[currentLanguageTag]}\n                    </a>\n                    <ul>\n                      {locale.supported.map(({ languageTag }) => (\n                        <li key={languageTag} className='kc-dropdown-item'>\n                          <a href='#' onClick={onChangeLanguageClickFactory(languageTag)}>\n                            {labelBySupportedLanguageTag[languageTag]}\n                          </a>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )}\n          {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n            displayRequiredFields ? (\n              <div className={clsx(props.kcContentWrapperClass)}>\n                <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                  <span className='subtitle'>\n                    <span className='required'>*</span>\n                    {msg('requiredFields')}\n                  </span>\n                </div>\n                <div className='col-md-10'>\n                  <h1 id='kc-page-title'>{headerNode}</h1>\n                </div>\n              </div>\n            ) : (\n              <h1 id='kc-page-title'>{headerNode}</h1>\n            )\n          ) : displayRequiredFields ? (\n            <div className={clsx(props.kcContentWrapperClass)}>\n              <div className={clsx(props.kcLabelWrapperClass, 'subtitle')}>\n                <span className='subtitle'>\n                  <span className='required'>*</span> {msg('requiredFields')}\n                </span>\n              </div>\n              <div className='col-md-10'>\n                {showUsernameNode}\n                <div className={clsx(props.kcFormGroupClass)}>\n                  <div id='kc-username'>\n                    <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                    <a id='reset-login' href={url.loginRestartFlowUrl}>\n                      <div className='kc-login-tooltip'>\n                        <i className={clsx(props.kcResetFlowIcon)}></i>\n                        <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {showUsernameNode}\n              <div className={clsx(props.kcFormGroupClass)}>\n                <div id='kc-username'>\n                  <label id='kc-attempted-username'>{auth?.attemptedUsername}</label>\n                  <a id='reset-login' href={url.loginRestartFlowUrl}>\n                    <div className='kc-login-tooltip'>\n                      <i className={clsx(props.kcResetFlowIcon)}></i>\n                      <span className='kc-tooltip-text'>{msg('restartLoginTooltip')}</span>\n                    </div>\n                  </a>\n                </div>\n              </div>\n            </>\n          )}\n        </header>\n        <div id='kc-content'>\n          <div id='kc-content-wrapper'>\n            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n            {displayMessage &&\n              message !== undefined &&\n              (message.type !== 'warning' || !isAppInitiatedAction) && (\n                <div className={clsx('alert', `alert-${message.type}`)}>\n                  {message.type === 'success' && (\n                    <span\n                      className={clsx(props.kcFeedbackSuccessIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'warning' && (\n                    <span\n                      className={clsx(props.kcFeedbackWarningIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'error' && (\n                    <span\n                      className={clsx(props.kcFeedbackErrorIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  {message.type === 'info' && (\n                    <span\n                      className={clsx(props.kcFeedbackInfoIcon)}\n                      style={{ background: 'none' }}\n                    ></span>\n                  )}\n                  <span\n                    className='kc-feedback-text'\n                    style={{ background: 'none' }}\n                    dangerouslySetInnerHTML={{\n                      __html: message.summary,\n                    }}\n                  />\n                </div>\n              )}\n            {formNode}\n            {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n              <form\n                id='kc-select-try-another-way-form'\n                action={url.loginAction}\n                method='post'\n                className={clsx(displayWide && props.kcContentWrapperClass)}\n              >\n                <div\n                  className={clsx(\n                    displayWide && [\n                      props.kcFormSocialAccountContentClass,\n                      props.kcFormSocialAccountClass,\n                    ]\n                  )}\n                >\n                  <div className={clsx(props.kcFormGroupClass)}>\n                    <input type='hidden' name='tryAnotherWay' value='on' />\n                    <a href='#' id='try-another-way' onClick={onTryAnotherWayClick}>\n                      {msg('doTryAnotherWay')}\n                    </a>\n                  </div>\n                </div>\n              </form>\n            )}\n            {displayInfo && (\n              <div id='kc-info' className={clsx(props.kcSignUpClass)}>\n                <div id='kc-info-wrapper' className={clsx(props.kcInfoAreaWrapperClass)}>\n                  {infoNode}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Template\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["Register","memo","kcContext","i18n","props","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","console","log","authorizedMailDomains","doFetchDefaultThemeResources","headerNode","style","color","textAlign","fontWeight","fontSize","className","clsx","kcFormOptionsWrapperClass","display","justifyContent","alignItems","margin","href","loginUrl","formNode","id","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","displayInfo","displayMessage","displayRequiredFields","displayWide","showAnotherWayIfPresent","showUsernameNode","infoNode","changeLocale","labelBySupportedLanguageTag","currentLanguageTag","onChangeLanguageClickFactory","useCallbackFactory","kcLanguageTag","onTryAnotherWayClick","useConstCallback","document","forms","submit","locale","auth","message","isAppInitiatedAction","useReducer","isExtraCssLoaded","setExtraCssLoaded","useEffect","isUnmounted","cleanups","toArr","x","split","Promise","all","stylesCommon","map","relativePath","pathJoin","resourcesCommonPath","styles","resourcesPath","reverse","headInsert","position","then","scripts","forEach","src","undefined","kcHtmlClass","htmlClassList","getElementsByTagName","classList","tokens","add","push","remove","f","kcLoginClass","kcHeaderClass","kcHeaderWrapperClass","LogoApp","alt","kcFormCardClass","kcFormCardAccountClass","kcFormHeaderClass","internationalizationEnabled","assert","supported","length","kcLocaleWrapperClass","languageTag","onClick","showUsername","showResetCredentials","kcContentWrapperClass","attemptedUsername","loginRestartFlowUrl","kcResetFlowIcon","kcFeedbackSuccessIcon","background","kcFeedbackWarningIcon","kcFeedbackErrorIcon","kcFeedbackInfoIcon","dangerouslySetInnerHTML","__html","summary","showTryAnotherWayLink","loginAction","kcFormSocialAccountContentClass","kcFormSocialAccountClass","kcSignUpClass","kcInfoAreaWrapperClass","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}